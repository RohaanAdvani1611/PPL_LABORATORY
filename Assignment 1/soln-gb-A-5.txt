-----------------------------
A-5 Static Single Assignment
-----------------------------

        Now, we are  going to take a  look at the Static  Single Assignment form
        that GCC uses later during optimization.  In SSA form, each variable may
        be assigned at most once. Also,  exactly one assignment of each variable
        dominates every use of the variable.

        In order  to implement SSA, local  variables are suffixed with  a unique
        number which represents the assignment.  For example, two assignments to
        the variable `a' may look like `a_0' and `a_1'.

        Compile the following program (file A-5.c) and observe the dumps.

        Source file : A-5.c
        Compilation : gcc-4.7.2 -c -fdump-tree-cfg -fdump-tree-ssa A-5.c
        View result : vi -O A-5.c.*.cfg A-5.c.*.ssa
        Clear dumps : rm -f A-5.c.* A-5.o

Program
-------

int main()                                   |main ()
{                                            |{
    int a, b, c, d, n;                       |  int n;
                                             |  int d;
                                             |  int c;
                                             |  int b;
                                             |  int a;
                                             |
                                             |<bb 2>:
    d = 10;                                  |  d_3 = 10;
    if (c > d) {                             |  if (c_4(D) > d_3)
        a = 2;                               |    goto <bb 3>;
        b = 2;                               |  else
    } else {                                 |    goto <bb 4>;
        a = 2;                               |
        b = 3;                               |<bb 3>:
    }                                        |  a_5 = 2;
                                             |  b_6 = 2;
                                             |  goto <bb 5>;
                                             |
                                             |<bb 4>:
                                             |  a_7 = 2;
                                             |  b_8 = 3;
                                             |
                                             |<bb 5>:
                                             |  # a_1 = PHI <a_5(3), a_7(4)>
                                             |  # b_2 = PHI <b_6(3), b_8(4)>
    c = a + b;                               |  c_9 = a_1 + b_2;
                                             |  return;
                                             |
}                                            |}

Questions
---------

        1   Do you notice that each usage of local variable as an operand uses a
            suffix that can be tracked to it's assignment? Why do some variables
            have a suffix `(D)'?

	A   Local variables are  suffixed with a unique  number which represents
            the assignment. For  example, `d_3' refers to the  usage of variable
            `d'  and  the  only  assignment  which reaches  this  point  is  the
            assignment `d_3'.  Variables that are  likely to be used  before any
            assignment are suffixed  with `(D)' to indicate  that the assignment
            was implicit in the declaration.  This happens to both uninitialized
            local variables and formal parameters.  For example, variable `c' is
            used as `c_4(D)' in the `if' condition.


        2   Find the point in the CFG in  which the paths of the two assignments
            to variable `a'  and `b' merge. You will notice  that PHI statements
            have  been  introduced.  Can  you   guess  the  syntax  of  the  PHI
            statements?

	A   A PHI node merges assignments from different paths and creates a new
            assignment. For example:

                # a_1 = PHI <a_5(3), a_7(4)> 

            indicates that if  the control reaches here from basic  block 3 then
            use the  value of a_5;  otherwise if  the control reaches  here from
            basic block 4 then use the value of a_7.

        3   Can you think of an example in which a PHI node merges more than two
            versions of a variable?

	A   A switch statement can result in a merge of more than two paths (and
            hence possibly more than two assignments). Consider:

            int main()
            {
                int a, b;
                switch (a)
                {
                    case 1:
                        b = 2;
                        break;
                    case 2:
                        b = 3;
                        break;
                    case 3:
                        b = 4;
                    case 4:
                        b = 5;
                        break;
                    case 5:
                    case 6:
                        b = 6;
                        break;
                    default:
                        b = 7;
                }
                return b;
            }
            
           


